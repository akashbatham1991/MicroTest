CG Session links:
-----------------
https://cloud.google.com/blog/products/application-modernization/choosing-between-apigee-api-gateway-and-cloud-endpoints
https://www.youtube.com/watch?v=xZ6DYaSZ4WI&t=7s
https://owasp.org/www-project-top-ten/
https://cloud.google.com/blog/products/identity-security/new-waf-capabilities-in-cloud-armor
https://cloud.google.com/security/products/identity-platform
https://cloud.google.com/apigee
https://youtu.be/O_xCDsFysgY?si=E9BgTs1lDHmhIJEP
https://medium.com/google-cloud/best-practices-for-architecting-cost-effective-and-scalable-apigee-x-payg-organisation-in-gcp-f575cc504e74
https://partner.cloudskillsboost.google/


https://degreed.com/pathway/3pmzz5l38n/pathway?newWindow=true



------------
https://docs.apigee.com/api-platform/get-started/get-started
https://console.cloud.google.com/apigee/welcome?referrer=search&inv=1&invt=AbxQjw&project=ethereal-terra-166410
https://cloud.google.com/apigee/docs/api-platform/get-started/permissions
https://www.youtube.com/playlist?list=PLIXjuPlujxxz3UXTytamxUB8EGzbaqAqQ
https://docs.apigee.com/


With Apigee, you'll be able to securely expose bear api's with API keys or OAuth JWT modernize existing soap services publisher api's to developers through your own custom API portal and get visibility into usage of your api's
via api analytics. all of that is available to you when you manage your api's with Apogee edge.

listen api's are the foundation for digital businesses large and small and with Apigee you're ready to harness that potential for yourself.

I'll show you how to wrap management around your API in minutes. 

Before we do that let's cover some basics the key concept enabling the API management goodness and Apigee edge is the API proxy, a proxy is a wrapper for your actual service, clients instead of calling your API endpoint directly, call the API proxy and the API proxy calls your existing API. you may be thinking why the extra hop why use one extra moving part, well I'll tell you, the API proxy provides the way to plug in an application independent mechanism for you to specify consistent management rules and policies that apply to all of your API. 
your api's might be a mix of services lacking consistency with respect to security or data model or even URL design and an API proxy allows you to build a coherent facade around those various endpoints or maybe all of your API are clean new implementations so you don't need a proxy to enforce consistency but you will still want an API proxy to handle things like a lot token verification or caching routing, rate limiting and analytics and reporting.
Apigee can provide all of that with no coding and no modification of your existing services so that's API management.

Apigee edge lets you easily add management to any API.


What is Apigee Edge?
--------------------
	Apigee Edge is a platform for developing and managing APIs. By fronting services with a proxy layer, Edge provides an abstraction or facade for your backend service APIs and provides security, rate limiting, quotas, analytics, and more.
	
	Making your services available on the web:
	------------------------------------------
		Companies today want to make their backend services available on the web so that these services can be consumed by apps running on mobile devices and desktops. These apps might be developed and released by the same company that exposed the services, or by third-party app developers who make use of publicly available services.
		Make a request to an HTTP endpoint and consume any response data. 
		
		Because providers make their services available over the web, they must ensure that they have taken all necessary steps to secure and protect their services from unauthorized access. As a service provider, consider:
			Security: 		How will you control access to your services to prevent unauthorized access?
			Compatibility: 	Will your services work across different platforms and devices?
			Measurability: 	How can you monitor your services to make sure they are available?
			Monetization: 	How can you track and bill customers for access to your services?
			And many other considerations.

		After a client app has been released that accesses any services, the service provider is then required to make sure that those services continue to work over time as they add, modify, or delete those services. The service provider must also have a way to keep app developers aware of any changes to the services to ensure that client apps stay in sync with those services.
		
		Client app developers face challenges when trying to consume services from different providers. There are many technologies available today for use by a service provider to expose its services. The same client app might have to use one mechanism to consume a service from one provider, and a different mechanism to consume a service from a different provider. App developers can even face the situation where they have to use different mechanisms to consume services from the same provider.
		
		
		Make services available through Apigee Edge:
		--------------------------------------------
			Apigee Edge enables you to provide secure access to your services with a well-defined API that is consistent across all of your services, regardless of service implementation. A consistent API:
				Makes it easy for app developers to consume your services.
				Enables you to change the backend service implementation without affecting the public API.
				Enables you to take advantage of the analytics, monetization, developer portal, and other features built into Edge.
				
			Rather than having app developers consume your services directly, they access an API proxy created on Edge. The API proxy functions as a mapping of a publicly available HTTP endpoint to your backend service.

			By creating an API proxy you let Edge handle the security and authorization tasks required to protect your services, as well as to analyze, monitor, and monetize those services.

			Because app developers make HTTP requests to an API proxy, rather than directly to your services, developers do not need to know anything about the implementation of your services. All the developer needs to know is:
				The URL of the API proxy endpoint.
				Any query parameters, headers, or body parameters passed in a request.
				Any required authentication and authorization credentials.
				The format of the response, including the response data format, such as XML or JSON.	
				
			The API proxy isolates the app developer from your backend service. Therefore you are free to change the service implementation as long as the public API remains consistent. 

			By maintaining a consistent frontend API, existing client apps will continue to work regardless of changes on the backend.

			You can use policies on the API proxy to add functionality to a service without having to make any changes to the backend service. For example, you can add policies to your proxy to perform data transformations and filtering, add security, execute conditional logic or custom code, and to perform many other actions. The important thing to remember is you implement policies on Edge, not on your backend server.

		
	Create an API product:
	----------------------
		An API proxy is the HTTP endpoint on Apigee Edge that developers use to access your backend services. While it is possible, you typically do not make individual API proxies available. Instead, you group one or more API proxies into an API product.
		
		An API product is a bundle of API proxies combined with a service plan. That service plan can set access limits on API proxies, provide security, allow monitoring and analytics, and provide additional features.
		API products are also the central mechanism that Edge uses for authorization and access control to your APIs.
		You have a great deal of flexibility when creating API products. For example, multiple API products can share the same API proxy. 
		
		You can set different properties on each API product. For example, you might make available one API product with a low access limit, such as 1000 requests per day, for a bargain price. You then release another API product that provides access to the same API proxy, but with a much higher access limit, for a higher price. Or, you might create a free API product that allows read-only access to your services, and then sell an API product to the same API proxies that allows read/write access.
		
		
	Allow a client-side app to access your API product:
	---------------------------------------------------
		When app developers decide that they want to access your services, they must first register their client app with your API product.
		Upon registration, an app developer receives an API key that they must then include in every request to an API proxy included in the API product.
		That key is authenticated and, if authentication is successful, the request is allowed to access your backend service.
		At any time, you can revoke the key so that the client app no longer has access to your services. Or, you can define a time limit on a key so that the developer must refresh the key after a specific time.
		
		You decide how to handle registration requests from developers to access your API products. 
		By using Apigee Edge Developer Services, you can automate the registration process; or you can use a manual process to control access.
		
		
		Create API products and make them available to developers:
			Create one or more API proxies that map publicly available URLs to your backend services.
			Create an API product that bundles your API proxies.
			Deploy your API proxies and API product.
			Let your developers know that the API product is available.

		Once app developers know about the availability of your API product, they:
			Register their client apps with your API product.
			Receive an API key for the API product.
			Make requests to your services through API proxies (which are bundled in the API product) and pass the API key with each request.
		

	Components of Apigee Edge:
	--------------------------
		Apigee Edge consists of: 
			Edge API runtime, 
			Edge monitoring and analytics, and 
			Edge developer ecosystem 
			that together provide a comprehensive infrastructure for API creation, security, management, and operations.
			
	
	Apigee Edge enables you to create two types of portals:
		Integrated portal,
		Drupal-based portal. 
	
	
	Flavors of Edge:
	----------------
		Apigee Edge comes in the following flavors:
			
			Public Cloud: 
				A hosted SAAS version in which Apigee maintains the environment, allowing you to concentrate on building your services and defining the APIs to those services.
			
			Private Cloud: 
				An on-premises installation in which you control the hardware environment and are responsible for the installation, upgrade, maintenance, and other administrative processes.
				
				
	Build RESTful APIs:
	-------------------
		You have data, you have services, and you want to develop new business solutions quickly, both internally and externally.

		With Apigee, you can build API proxies—RESTful, HTTP-based APIs that interact with your services. With easy-to-use APIs, developers can be more productive, increasing your speed to market.

		API proxies give you the full power of Apigee's API platform to secure API calls, throttle traffic, mediate messages, control error handling, cache things, build developer portals, document APIs, analyze API traffic data, make money on the use of your APIs, protect against bad bots, and more.			
		
	
Build your first API proxy:
---------------------------
	Apigee Edge is a platform for developing and managing API proxies.
	With a proxy, you can provide value-added features such as:
		Security
		Rate limiting
		Quotas
		Caching & persistence
		Analytics
		Transformations
		CORS
		Fault handling
		And so much more...

	To build and deploy your first API proxy:
	-----------------------------------------
		1: Create an API proxy using the Edge management UI. You'll connect your proxy to a mock endpoint so you can see how it works.
		2: Test your new proxy to make sure you're on track.
		3: Change your target endpoint so your policy has more interesting data to play with.
		4: Add a policy to convert the response from XML to JSON. Policies are at the heart of your proxy's request-response flow.		
		
		
AccessControl policy:
---------------------
	The Access Control policy lets you allow or deny access to your APIs by specific IP addresses.

		
===========================

		