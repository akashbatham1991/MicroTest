Diff b/w replication and sharding:
----------------------------------
	Here’s a clear breakdown of the difference between replication and sharding, especially in the context of databases and distributed systems:


	Replication:	(Improves Read Scalability)
	------------
		Purpose: 		Improves availability, fault tolerance, and read scalability.
		How it works: 	"Copies" the same data across multiple servers (replicas).
		Use Case: 		If one server fails, another replica can serve the data.
		
		Benefits:
			High availability
			Disaster recovery
			Load balancing for read operations

		Drawbacks:
			Increased storage usage
			Potential data inconsistency (especially in asynchronous replication)


	Sharding:		(Improves Write Scalability)
	---------
		Purpose: 		Improves write scalability and performance for large datasets.
		How it works: 	"Splits" data into distinct subsets (shards), each stored on a different server.
		Use Case: 		Each shard handles a portion of the data, reducing load on any single server.
		
		Benefits:
			Horizontal scaling
			Faster queries for large datasets
			Efficient use of resources

		Drawbacks:
			Complex setup and maintenance
			Cross-shard queries can be slow and tricky


	Analogy:
	--------
		Replication: 	Like making multiple photocopies of the same document and storing them in different places.
		Sharding: 		Like splitting a book into chapters and storing each chapter in a different location.
		
			
		
		
	Partitioning:
	-------------
		Partitioning divides a dataset into smaller, more manageable segments to improve performance and maintainability.
			
			Horizontal Partitioning: 
				Splits data by rows. For example, a user table might be divided by region.
			
			Vertical Partitioning: 
				Splits data by columns. Useful when some columns are accessed more frequently than others.
				
				Vertical partitioning involves dividing a table into multiple tables based on columns, not rows. 
				Each partition contains a subset of the original table’s columns.


		Benefits:
		---------
			Faster queries by scanning only relevant partitions.
			Easier maintenance and indexing.
			Better resource utilization within a single database.
			
		Benefits of Vertical Partitioning:
		----------------------------------
			Performance: 
				Queries that only need a few columns (e.g., login checks) don’t scan the entire wide table.
			
			Storage optimization: 
				Frequently accessed columns can be stored in faster storage; rarely used ones in cheaper storage.
			
			Security: 
				Sensitive columns (like passwords) can be isolated and encrypted separately.
	
	
		Even though the data is physically split, logical relationships are preserved through: 
			schema design, 
			shared keys, and 
			smart querying. 


	Replication:
	------------
		Replication creates copies of data across multiple servers to improve availability and fault tolerance.

			Master-Slave Replication: One node handles writes (master), others handle reads (slaves).
			Multi-Master Replication: Multiple nodes can handle both reads and writes.
		
		Benefits:
		---------
			High availability and disaster recovery
			Load balancing for read-heavy workloads
			Data redundancy for fault tolerance


	Sharding:
	---------
		Sharding is a form of horizontal partitioning, where data is split by rows across multiple databases or nodes. 
		
			Each shard holds a subset of the data, often based on a shard key (e.g., user ID).
			Shards can be replicated for reliability.

		Benefits:
		---------
			Horizontal scalability
			Reduced load per server
			Tailored optimization per shard.
			
			
	***		
	How They Work Together:
	-----------------------
		Strategy 		Purpose 							Scope
		--------		-------								-----
		Partitioning 	Optimize performance 				Within a single database
		Replication 	Improve availability & resilience 	Across multiple nodes
		Sharding 		Scale horizontally 					Across multiple databases


	In practice, systems often combine all three. 
	
	For example:
		a sharded database might replicate each shard for fault tolerance, and use partitioning within each shard to optimize queries.



during partitioning, although data gets split into multiple tables but how they are still connected in a meaningful or related way ?
--------------
	When data is partitioned, whether horizontally (by rows) or vertically (by columns), the key to keeping it meaningfully connected lies in: 
		1. Shared Primary Keys or Foreign Keys, 
		2. Logical Partitioning Functions
		3. Metadata and Catalog Tables
		4. Query-Time Joins and Aggregations.
	
	1. Shared Primary Keys or Foreign Keys:
	---------------------------------------
		Partitioned tables often retain a common key column (like user_id, order_id, etc.) that acts as a link between them.

		Vertical Partitioning Example:
			Both tables share the id column, so you can join them
		
		Horizontal Partitioning Example: 
			You might split a large Orders table by region.
			These tables have the same schema and can be queried together using UNION or partition-aware logic.

	2. Logical Partitioning Functions:
	----------------------------------
		Databases use partitioning keys and partition functions to determine where each piece of data belongs.

	3. Metadata and Catalog Tables:
	-------------------------------
		Some systems maintain metadata tables that track which partition holds which data. 
	
	4. Query-Time Joins and Aggregations:
	-------------------------------------
		Even though data is split, you can reconstruct relationships at query time using joins, unions, or views.
