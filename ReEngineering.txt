https://www.geeksforgeeks.org/software-engineering-re-engineering/

What is Re-engineering?
-----------------------
	Re-engineering, also known as software re-engineering, is the process of analyzing, designing, and modifying existing software systems to improve their quality, performance, and maintainability and also minimizing the risks and costs associated with the redevelopment of the system from scratch.

	Software reengineering is a critical process that involves improving and modernizing legacy systems to meet current and future needs. 
	
	These steps enable developers to identify and fix issues in the legacy system and modernize it to meet current and future needs.
	
	By investing in software reengineering, companies can modernize their legacy systems, improve system performance, and reduce maintenance costs, ultimately leading to improved business outcomes. 


The process of software re-engineering involves the following steps:
--------------------------------------------------------------------
	1. Planning: 
		The first step is to plan the re-engineering process, which involves: 
			identifying the reasons for re-engineering, 
			defining the scope, and 
			establishing the goals and 
			objectives of the process.
	
	2. Analysis: 
		The next step is to analyze the existing system, including: 
			the code, 
			documentation, 
			other artifacts, 
			identifying the system's strengths and weaknesses, 
			as well as any issues that need to be addressed.
	
	3. Design: 
		Based on the analysis, the next step is to design the new or updated software system. This involves identifying the changes that need to be made and developing a plan to implement them.
	
	4. Implementation: 
		The next step is to implement the changes by modifying the existing code, adding new features, and updating the documentation and other artifacts.
	
	5. Testing: 
		Once the changes have been implemented, the software system needs to be tested to ensure that it meets the new requirements and specifications.
	
	6. Deployment: 	
		The final step is to deploy the re-engineered software system and make it available to end-users.
	
	
Why Perform Re-engineering?
--------------------------
Re-engineering can be done for a variety of reasons, such as:

	1. To improve the software's performance and scalability: 
		By analyzing the existing code and identifying bottlenecks, re-engineering can be used to improve the software's performance and scalability.
	
	2. To add new features: 
		Re-engineering can be used to add new features or functionality to existing software.
	
	3. To support new platforms: 
		Re-engineering can be used to update existing software to work with new hardware or software platforms.
	
	4. To improve maintainability: 
		Re-engineering can be used to improve the software's overall design and architecture, making it easier to maintain and update over time.
	
	5. To meet new regulations and compliance: 
		Re-engineering can be done to ensure that the software is compliant with new regulations and standards.
	
	6. Improving software quality: 
		Re-engineering can help improve the quality of software by eliminating defects, improving performance, and enhancing reliability and maintainability.
	
	7. Updating technology: 
		Re-engineering can help modernize the software system by updating the technology used to develop, test, and deploy the system.
	
	8. Enhancing functionality: 
		Re-engineering can help enhance the functionality of the software system by adding new features or improving existing ones.
	
	9. Resolving issues: 
		Re-engineering can help resolve issues related to scalability, security, or compatibility with other systems.	



Advantages of Re-engineering:
----------------------------
	1. Reduced Risk: 
		As the software is already existing, the risk is less as compared to new software development. Development problems, staffing problems and specification problems are the lots of problems that may arise in new software development. 
	
	2. Reduced Cost:  
		The cost of re-engineering is less than the costs of developing new software.
	
	3. Revelation of Business Rules:  
		As a system is re-engineered , business rules that are embedded in the system are rediscovered.
	
	4. Better use of Existing Staff: 
		Existing staff expertise can be maintained and extended accommodate new skills during re-engineering.
	
	5. Improved efficiency: 
		By analyzing and redesigning processes, re-engineering can lead to significant improvements in productivity, speed, and cost-effectiveness.
	
	6. Increased flexibility: 
		Re-engineering can make systems more adaptable to changing business needs and market conditions.
	
	7. Better customer service: 
		By redesigning processes to focus on customer needs, re-engineering can lead to improved customer satisfaction and loyalty.
	
	8. Increased competitiveness: 
		Re-engineering can help organizations become more competitive by improving efficiency, flexibility, and customer service.
	
	9. Improved quality: 
		Re-engineering can lead to better quality products and services by identifying and eliminating defects and inefficiencies in processes.
	
	10. Increased innovation: 
		Re-engineering can lead to new and innovative ways of doing things, helping organizations to stay ahead of their competitors.
	
	11. Improved compliance: 
		Re-engineering can help organizations to comply with industry standards and regulations by identifying and addressing areas of non-compliance.


Disadvantages of Re-engineering:
--------------------------------
Major architectural changes or radical reorganizing of the systems data management has to be done manually. Re-engineered system is not likely to be as maintainable as a new system developed using modern software Re-engineering methods. 

	1. High costs: 
		Re-engineering can be a costly process, requiring significant investments in time, resources, and technology.
	
	2. Disruption to business operations: 
		Re-engineering can disrupt normal business operations and cause inconvenience to customers, employees and other stakeholders.
	
	3. Resistance to change: 
		Re-engineering can encounter resistance from employees who may be resistant to change and uncomfortable with new processes and technologies.
	
	4. Risk of failure: 
		Re-engineering projects can fail if they are not planned and executed properly, resulting in wasted resources and lost opportunities.
	
	5. Lack of employee involvement: 
		Re-engineering projects that are not properly communicated and involve employees, may lead to lack of employee engagement and ownership resulting in failure of the project.
	
	6. Difficulty in measuring success: 
		Re-engineering can be difficult to measure in terms of success, making it difficult to justify the cost and effort involved.
	
	7. Difficulty in maintaining continuity: 
		Re-engineering can lead to significant changes in processes and systems, making it difficult to maintain continuity and consistency in the organization.
		
		
Factors Affecting Cost of Re-engineering:
----------------------------------------
Re-engineering can be a costly process, and there are several factors that can affect the cost of re-engineering a software system:

	1. Size and complexity of the software: 
		The larger and more complex the software system, the more time and resources will be required to analyze, design, and modify it.
	
	2. Number of features to be added or modified: 
		The more features that need to be added or modified, the more time and resources will be required.
	
	3. Tools and technologies used: 
		The cost of re-engineering can be affected by the tools and technologies used, such as the cost of software development tools and the cost of hardware and infrastructure.
	
	4. Availability of documentation: 
		If the documentation of the existing system is not available or is not accurate, then it will take more time and resources to understand the system.
	
	5. Team size and skill level: 
		The size and skill level of the development team can also affect the cost of re-engineering. A larger and more experienced team may be able to complete the project faster and with fewer resources.
	
	6. Location and rate of the team: 
		The location and rate of the development team can also affect the cost of re-engineering. Hiring a team in a lower-cost location or with lower rates can help to reduce the cost of re-engineering.
	
	7. Testing and quality assurance: 
		Testing and quality assurance are important aspects of re-engineering, and they can add significant costs to the project.
	
	8. Post-deployment maintenance: 
		The cost of post-deployment maintenance such as bug fixing, security updates, and feature additions can also play a role in the cost of re-engineering.

	In summary, the cost of re-engineering a software system can vary depending on a variety of factors, including the size and complexity of the software, the number of features to be added or modified, the tools and technologies used, and the availability of documentation and the skill level of the development team. It's important to carefully consider these factors when estimating the cost of re-engineering a software system.		